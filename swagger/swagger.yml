swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /ads/:
    get:
      tags:
      - ads
      description: get Ads
      operationId: AdsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ads'
        "403":
          description: ""
    post:
      tags:
      - ads
      description: create Ads
      operationId: AdsController.Post
      parameters:
      - in: body
        name: body
        description: body for Ads content
        required: true
        schema:
          $ref: '#/definitions/models.Ads'
      responses:
        "201":
          description: '{int} models.Ads'
        "403":
          description: body is empty
  /ads/{id}:
    get:
      tags:
      - ads
      description: get Ads by id
      operationId: AdsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ads'
        "403":
          description: :id is empty
    put:
      tags:
      - ads
      description: update the Ads
      operationId: AdsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Ads content
        required: true
        schema:
          $ref: '#/definitions/models.Ads'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Ads'
        "403":
          description: :id is not int
    delete:
      tags:
      - ads
      description: delete the Ads
      operationId: AdsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /articles/:
    get:
      tags:
      - articles
      description: get Articles
      operationId: ArticlesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Articles'
        "403":
          description: ""
    post:
      tags:
      - articles
      description: create Articles
      operationId: ArticlesController.Post
      parameters:
      - in: body
        name: body
        description: body for Articles content
        required: true
        schema:
          $ref: '#/definitions/models.Articles'
      responses:
        "201":
          description: '{int} models.Articles'
        "403":
          description: body is empty
  /articles/{id}:
    get:
      tags:
      - articles
      description: get Articles by id
      operationId: ArticlesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Articles'
        "403":
          description: :id is empty
    put:
      tags:
      - articles
      description: update the Articles
      operationId: ArticlesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Articles content
        required: true
        schema:
          $ref: '#/definitions/models.Articles'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Articles'
        "403":
          description: :id is not int
    delete:
      tags:
      - articles
      description: delete the Articles
      operationId: ArticlesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /comments/:
    get:
      tags:
      - comments
      description: get Comments
      operationId: CommentsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Comments'
        "403":
          description: ""
    post:
      tags:
      - comments
      description: create Comments
      operationId: CommentsController.Post
      parameters:
      - in: body
        name: body
        description: body for Comments content
        required: true
        schema:
          $ref: '#/definitions/models.Comments'
      responses:
        "201":
          description: '{int} models.Comments'
        "403":
          description: body is empty
  /comments/{id}:
    get:
      tags:
      - comments
      description: get Comments by id
      operationId: CommentsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Comments'
        "403":
          description: :id is empty
    put:
      tags:
      - comments
      description: update the Comments
      operationId: CommentsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Comments content
        required: true
        schema:
          $ref: '#/definitions/models.Comments'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Comments'
        "403":
          description: :id is not int
    delete:
      tags:
      - comments
      description: delete the Comments
      operationId: CommentsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /links/:
    get:
      tags:
      - links
      description: get Links
      operationId: LinksController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Links'
        "403":
          description: ""
    post:
      tags:
      - links
      description: create Links
      operationId: LinksController.Post
      parameters:
      - in: body
        name: body
        description: body for Links content
        required: true
        schema:
          $ref: '#/definitions/models.Links'
      responses:
        "201":
          description: '{int} models.Links'
        "403":
          description: body is empty
  /links/{id}:
    get:
      tags:
      - links
      description: get Links by id
      operationId: LinksController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Links'
        "403":
          description: :id is empty
    put:
      tags:
      - links
      description: update the Links
      operationId: LinksController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Links content
        required: true
        schema:
          $ref: '#/definitions/models.Links'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Links'
        "403":
          description: :id is not int
    delete:
      tags:
      - links
      description: delete the Links
      operationId: LinksController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /messages/:
    get:
      tags:
      - messages
      description: get Messages
      operationId: MessagesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Messages'
        "403":
          description: ""
    post:
      tags:
      - messages
      description: create Messages
      operationId: MessagesController.Post
      parameters:
      - in: body
        name: body
        description: body for Messages content
        required: true
        schema:
          $ref: '#/definitions/models.Messages'
      responses:
        "201":
          description: '{int} models.Messages'
        "403":
          description: body is empty
  /messages/{id}:
    get:
      tags:
      - messages
      description: get Messages by id
      operationId: MessagesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Messages'
        "403":
          description: :id is empty
    put:
      tags:
      - messages
      description: update the Messages
      operationId: MessagesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Messages content
        required: true
        schema:
          $ref: '#/definitions/models.Messages'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Messages'
        "403":
          description: :id is not int
    delete:
      tags:
      - messages
      description: delete the Messages
      operationId: MessagesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /migrations/:
    get:
      tags:
      - migrations
      description: get Migrations
      operationId: MigrationsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Migrations'
        "403":
          description: ""
    post:
      tags:
      - migrations
      description: create Migrations
      operationId: MigrationsController.Post
      parameters:
      - in: body
        name: body
        description: body for Migrations content
        required: true
        schema:
          $ref: '#/definitions/models.Migrations'
      responses:
        "201":
          description: '{int} models.Migrations'
        "403":
          description: body is empty
  /migrations/{id}:
    get:
      tags:
      - migrations
      description: get Migrations by id
      operationId: MigrationsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Migrations'
        "403":
          description: :id is empty
    put:
      tags:
      - migrations
      description: update the Migrations
      operationId: MigrationsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Migrations content
        required: true
        schema:
          $ref: '#/definitions/models.Migrations'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Migrations'
        "403":
          description: :id is not int
    delete:
      tags:
      - migrations
      description: delete the Migrations
      operationId: MigrationsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /telescope_entries/:
    get:
      tags:
      - telescope_entries
      description: get TelescopeEntries
      operationId: TelescopeEntriesController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TelescopeEntries'
        "403":
          description: ""
    post:
      tags:
      - telescope_entries
      description: create TelescopeEntries
      operationId: TelescopeEntriesController.Post
      parameters:
      - in: body
        name: body
        description: body for TelescopeEntries content
        required: true
        schema:
          $ref: '#/definitions/models.TelescopeEntries'
      responses:
        "201":
          description: '{int} models.TelescopeEntries'
        "403":
          description: body is empty
  /telescope_entries/{id}:
    get:
      tags:
      - telescope_entries
      description: get TelescopeEntries by id
      operationId: TelescopeEntriesController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TelescopeEntries'
        "403":
          description: :id is empty
    put:
      tags:
      - telescope_entries
      description: update the TelescopeEntries
      operationId: TelescopeEntriesController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for TelescopeEntries content
        required: true
        schema:
          $ref: '#/definitions/models.TelescopeEntries'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.TelescopeEntries'
        "403":
          description: :id is not int
    delete:
      tags:
      - telescope_entries
      description: delete the TelescopeEntries
      operationId: TelescopeEntriesController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /user_auths/:
    get:
      tags:
      - user_auths
      description: get UserAuths
      operationId: UserAuthsController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserAuths'
        "403":
          description: ""
    post:
      tags:
      - user_auths
      description: create UserAuths
      operationId: UserAuthsController.Post
      parameters:
      - in: body
        name: body
        description: body for UserAuths content
        required: true
        schema:
          $ref: '#/definitions/models.UserAuths'
      responses:
        "201":
          description: '{int} models.UserAuths'
        "403":
          description: body is empty
  /user_auths/{id}:
    get:
      tags:
      - user_auths
      description: get UserAuths by id
      operationId: UserAuthsController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserAuths'
        "403":
          description: :id is empty
    put:
      tags:
      - user_auths
      description: update the UserAuths
      operationId: UserAuthsController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for UserAuths content
        required: true
        schema:
          $ref: '#/definitions/models.UserAuths'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.UserAuths'
        "403":
          description: :id is not int
    delete:
      tags:
      - user_auths
      description: delete the UserAuths
      operationId: UserAuthsController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /users/:
    get:
      tags:
      - users
      description: get Users
      operationId: UsersController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: ""
    post:
      tags:
      - users
      description: create Users
      operationId: UsersController.Post
      parameters:
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "201":
          description: '{int} models.Users'
        "403":
          description: body is empty
  /users/{id}:
    get:
      tags:
      - users
      description: get Users by id
      operationId: UsersController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is empty
    put:
      tags:
      - users
      description: update the Users
      operationId: UsersController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Users content
        required: true
        schema:
          $ref: '#/definitions/models.Users'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Users'
        "403":
          description: :id is not int
    delete:
      tags:
      - users
      description: delete the Users
      operationId: UsersController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
  /webinfos/:
    get:
      tags:
      - webinfos
      description: get Webinfos
      operationId: WebinfosController.Get All
      parameters:
      - in: query
        name: query
        description: Filter. e.g. col1:v1,col2:v2 ...
        type: string
      - in: query
        name: fields
        description: Fields returned. e.g. col1,col2 ...
        type: string
      - in: query
        name: sortby
        description: Sorted-by fields. e.g. col1,col2 ...
        type: string
      - in: query
        name: order
        description: Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
        type: string
      - in: query
        name: limit
        description: Limit the size of result set. Must be an integer
        type: string
      - in: query
        name: offset
        description: Start position of result set. Must be an integer
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Webinfos'
        "403":
          description: ""
    post:
      tags:
      - webinfos
      description: create Webinfos
      operationId: WebinfosController.Post
      parameters:
      - in: body
        name: body
        description: body for Webinfos content
        required: true
        schema:
          $ref: '#/definitions/models.Webinfos'
      responses:
        "201":
          description: '{int} models.Webinfos'
        "403":
          description: body is empty
  /webinfos/{id}:
    get:
      tags:
      - webinfos
      description: get Webinfos by id
      operationId: WebinfosController.Get One
      parameters:
      - in: path
        name: id
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Webinfos'
        "403":
          description: :id is empty
    put:
      tags:
      - webinfos
      description: update the Webinfos
      operationId: WebinfosController.Put
      parameters:
      - in: path
        name: id
        description: The id you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for Webinfos content
        required: true
        schema:
          $ref: '#/definitions/models.Webinfos'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.Webinfos'
        "403":
          description: :id is not int
    delete:
      tags:
      - webinfos
      description: delete the Webinfos
      operationId: WebinfosController.Delete
      parameters:
      - in: path
        name: id
        description: The id you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: id is empty
definitions:
  models.Ads:
    title: Ads
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Title:
        type: string
      Type:
        type: string
      UpdatedAt:
        type: string
        format: datetime
      Url:
        type: string
  models.Articles:
    title: Articles
    type: object
    properties:
      Classify:
        type: string
      Clicks:
        type: integer
        format: int64
      Content:
        type: string
      CreatedAt:
        type: string
        format: datetime
      DeletedAt:
        type: string
        format: datetime
      Desc:
        type: string
      Id:
        type: integer
        format: int64
      Img:
        type: string
      Like:
        type: integer
        format: int64
      Title:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.Comments:
    title: Comments
    type: object
    properties:
      ArticleId:
        $ref: '#/definitions/models.Articles'
      Content:
        type: string
      CreatedAt:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Name:
        type: string
      ReplyId:
        type: integer
        format: int64
      UpdatedAt:
        type: string
        format: datetime
      UserId:
        $ref: '#/definitions/models.Users'
  models.Links:
    title: Links
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      Desc:
        type: string
      Id:
        type: integer
        format: int64
      Img:
        type: string
      Title:
        type: string
      UpdatedAt:
        type: string
        format: datetime
      Url:
        type: string
  models.Messages:
    title: Messages
    type: object
    properties:
      Content:
        type: string
      CreatedAt:
        type: string
        format: datetime
      Id:
        type: integer
        format: int64
      Name:
        type: string
      ReplyId:
        type: string
      UpdatedAt:
        type: string
        format: datetime
      UserId:
        $ref: '#/definitions/models.Users'
  models.Migrations:
    title: Migrations
    type: object
    properties:
      Batch:
        type: integer
        format: int64
      Id:
        type: integer
        format: int64
      Migration:
        type: string
  models.TelescopeEntries:
    title: TelescopeEntries
    type: object
    properties:
      BatchId:
        type: string
      Content:
        type: string
      CreatedAt:
        type: string
        format: datetime
      FamilyHash:
        type: string
      Id:
        type: integer
        format: int64
      ShouldDisplayOnIndex:
        type: integer
        format: int32
      Type:
        type: string
      Uuid:
        type: string
  models.UserAuths:
    title: UserAuths
    type: object
    properties:
      Id:
        type: integer
        format: int64
      Identifier:
        type: string
      IdentityType:
        type: string
      Password:
        type: string
      UserId:
        type: integer
        format: int32
  models.Users:
    title: Users
    type: object
    properties:
      AvatarUrl:
        type: string
      Captcha:
        type: integer
        format: int64
      CreatedAt:
        type: string
        format: datetime
      Email:
        type: string
      Id:
        type: integer
        format: int64
      Intro:
        type: string
      IsAdmin:
        type: string
      Name:
        type: string
      Password:
        type: string
      Phone:
        type: string
      UpdatedAt:
        type: string
        format: datetime
  models.Webinfos:
    title: Webinfos
    type: object
    properties:
      CreatedAt:
        type: string
        format: datetime
      Description:
        type: string
      Email:
        type: string
      Github:
        type: string
      Icp:
        type: string
      Id:
        type: integer
        format: int64
      Keyword:
        type: string
      Personinfo:
        type: string
      Phone:
        type: string
      Qq:
        type: string
      StartTime:
        type: string
        format: datetime
      Title:
        type: string
      UpdatedAt:
        type: string
        format: datetime
      Weixin:
        type: string
      Zhifubao:
        type: string
tags:
- name: ads
  description: |
    AdsController operations for Ads
- name: articles
  description: |
    ArticlesController operations for Articles
- name: comments
  description: |
    CommentsController operations for Comments
- name: links
  description: |
    LinksController operations for Links
- name: messages
  description: |
    MessagesController operations for Messages
- name: migrations
  description: |
    MigrationsController operations for Migrations
- name: telescope_entries
  description: |
    TelescopeEntriesController operations for TelescopeEntries
- name: user_auths
  description: |
    UserAuthsController operations for UserAuths
- name: users
  description: |
    UsersController operations for Users
- name: webinfos
  description: |
    WebinfosController operations for Webinfos
